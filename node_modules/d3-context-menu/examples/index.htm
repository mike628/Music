<!doctype>
<html>
<head>
	<meta charset="utf-8">
	<title>Example</title>

	<link href="../css/d3-context-menu.css" rel="stylesheet">

	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/6.3.1/d3.min.js"></script>
	<script src="../js/d3-context-menu.js"></script>

	<style>
		.d3-context-menu-theme.dark {
			background: black;
			color: white;
		}
	</style>
</head>
<body>

	<script>
		var item4Disabled = false;
		var useDarkTheme = false;

		// Define your menu
		var menu = [

			{
				title: 'Toggle dark theme',
				action: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Item clicked', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
					useDarkTheme = !useDarkTheme;
				}
			},
			{
				title: 'Item #2',
				action: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Item clicked', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
				}
			},

			{
				title: function (data, event) {
					if (item4Disabled) {
						return 'Re-enable menu item #4';
					} else {
						return 'Disable menu item #4';
					}
				},
				action: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Disabling item 4!', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
					item4Disabled = !item4Disabled;
				}
			},
			{
				title: 'Item #4',
				disabled: function (data, event) {
					return item4Disabled;
				},
				action: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Item clicked', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
				}
			},

			/*
				If an item has a "divider" property set to true, it'll be considered a divider
			*/
			{
				divider: true
			},

			/*
				If you don't define an action for a menu item, it'll be considered a "header" item
			*/
			{
				title: 'Header'
			},
			/*
				If an item has a "children" property, it'll be create nested menu
			*/
			{
				title: 'Parent(nested menu)',
				children: [
					{
						title: 'Child',
						children: [
							{
								// header
								title: 'Grand-Child1'
							},
							{
								// normal
								title: 'Grand-Child2',
								action: function() {}
							},
							{
								// divider
								divider: true
							},
							{
								// disable
								title: 'Grand-Child3',
								action: function() {},
								disabled: true
							}
						]
					},
					{
						title: 'Change Color',
						children: function() {
							var colors = ['red', 'blue', 'green', 'yellow', 'orange', 'black', 'white'];
							return colors.map(function(color) {
								return {
									title: color,
									action: function (data, event) {
										console.log('color changed from ' + data + ' to ' + color);
										d3.select(this)
											.datum(color)
											.attr('fill', color);
									},
									disabled: function (data, event) {
										return data === color;
									}
								}
							})
						}
					}
				]
			},
			{
				title: 'Last item',
				action: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Item clicked', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
				}
			},
		]

		var data = ['red', 'green', 'steelblue'];

		var g = d3.select('body').append('svg')
			.attr('width', 200)
			.attr('height', 400)
			.append('g');

		var selection = g.selectAll('circles')
			.data(data)
			.enter()
			.append('circle')
			.attr('r', 30)
			.attr('fill', function (d) {
				return d;
			})
			.attr('cx', function(d) {
				return 100;
			})
			.attr('cy', function(d, i) {
				return (i + 1) * 100;
			});

		selection.on('contextmenu', d3.contextMenu(menu, {
				theme: function () {
					if (useDarkTheme) {
						return 'd3-context-menu-theme dark';
					}
					else {
						return 'd3-context-menu-theme';
					}
				},
				onOpen: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Menu Opened!', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
				},
				onClose: function (data, event) {
					var index = selection.nodes().indexOf(this);
					console.log('Menu Closed!', 'element:', this, 'data:', data, 'event:', event, 'index:', index);
				},
				position: function (data, event) {
					var bounds = this.getBoundingClientRect();
					if (data === 'green') {
						// first circle will have the menu aligned top-right
						return {
							left: bounds.left + bounds.width + 10,
							top: bounds.top
						}
					}
				}
			})); // attach menu to element
	</script>
</body>
</html>
